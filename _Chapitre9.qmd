# Manipulation de chaînes de caractères

En `R`, la manipulation des chaînes de caractères passe par deux librairies principales, R base et `stringr`. Ces librairies sont transversales à `dplyr` / `data.table` / `duckdb`, on peut mélanger sans difficulté, et la séparation en onglets est un peu artificielle dans ce chapitre. Il reste préférable de s'accorder sur un style de programmation homogène. En `duckdb`, certaines fonctions ne sont pas disponibles, et nous proposons des alternatives.

Les fonctions de R base sont souvent mieux connues (notamment dans les tutoriels et cours de programmation). La librairie `stringr` est intéressante car les noms des fonctions sont plus simples et plus homogènes. Cette librairie est efficace, car implémentée au-dessus de `stringi`, librairie qui pourra être utile pour certains traitements complexes (l'inversion d'une chaîne, l'encodage des caractères, les accents par exemple).

Pour en savoir plus sur le fonctionnement des chaînes de caractères en `R` : <https://book.utilitr.org/03_Fiches_thematiques/Fiche_donnees_textuelles.html>.

## Majuscule, minuscule

### Majuscule
::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
data donnees_sas;
  set donnees_sas;
  CSP_majuscule = upcase(CSPF);
run;
```

### R base {.unnumbered .unlisted}
```{r}
donnees_rbase$csp_maj <- toupper(donnees_rbase$cspf)
```

### tidyverse {.unnumbered .unlisted}
```{r}
donnees_tidyverse <- donnees_tidyverse %>% 
  mutate(csp_maj = toupper(cspf))
```

### data.table {.unnumbered .unlisted}
```{r}
donnees_datatable[, csp_maj := toupper(cspf)]
```

### arrow/duckdb {.unnumbered .unlisted}
```{r}
requete_duckdb %>% mutate(csp_maj = toupper(cspf)) %>% select(csp_maj)
```

### pandas {.unnumbered .unlisted}
```{python, warning=FALSE, message=FALSE, results='hide', python.reticulate = FALSE}
donnees_python['csp_maj'] = donnees_python['cspf'].str.upper()
```

:::

### Minuscule
::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
data donnees_sas;
  set donnees_sas;
  CSP_minuscule = lowcase(CSPF);
run;
```

### R base {.unnumbered .unlisted}
```{r}
donnees_rbase$csp_min <- tolower(donnees_rbase$cspf)
```

### tidyverse {.unnumbered .unlisted}
```{r}
donnees_tidyverse <- donnees_tidyverse %>% 
  mutate(csp_maj = tolower(cspf))
```

### data.table {.unnumbered .unlisted}
```{r}
# En minuscule
donnees_datatable[, csp_min := tolower(cspf)]
```

### arrow/duckdb {.unnumbered .unlisted}
```{r}
requete_duckdb %>% mutate(csp_maj = tolower(cspf)) %>% select(csp_maj)
```

### pandas {.unnumbered .unlisted}
```{python, warning=FALSE, message=FALSE, results='hide', python.reticulate = FALSE}
donnees_python['csp_min'] = donnees_python['cspf'].str.lower()
```

:::

### Première lettre en majuscule
::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
data donnees_sas;
  set donnees_sas;
  Niveau = propcase(Niveau);
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# 1ère lettre en majuscule, autres lettres en minuscule
donnees_rbase$niveau <- paste0(
  toupper(substr(donnees_rbase$niveau, 1, 1)),
  tolower(substr(donnees_rbase$niveau, 2, length(donnees_rbase$niveau)))
  )

# Autre solution
donnees_rbase$niveau <- tools::toTitleCase(donnees_rbase$niveau)
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# 1ère lettre en majuscule, autres lettres en minuscule
donnees_tidyverse <- donnees_tidyverse %>%  
  mutate(niveau = str_to_title(niveau))
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# 1ère lettre en majuscule, autres lettres en minuscule
donnees_datatable[, niveau := paste0(toupper(substr(niveau, 1, 1)), tolower(substr(niveau, 2, length(niveau))))]
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}
requete_duckdb %>% 
  # mutate(csp_maj = str_to_title(cspf)) %>% # fonction non traduite
  mutate(
    l_niveau = as.integer(length(niveau)-1),
    niveau = paste0(toupper(substr(niveau, 1, 1)), tolower(right(niveau, l_niveau)))) %>% 
  # note : on utilise la fonction duckdb right car substr semble ne pas accepter un paramètre variable
  select(l_niveau, niveau)
```

### pandas {.unnumbered .unlisted}
```{python, warning=FALSE, message=FALSE, results='hide', python.reticulate = FALSE}
donnees_python['niveau'] = donnees_python['cspf'].str.capitalize()
```

:::

## Nombre de caractères dans une chaîne de caractères
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
data donnees_sas;
  set donnees_sas;
  taille_id = length(identifiant);
run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
donnees_rbase$taille_id <- nchar(donnees_rbase$identifiant)
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
donnees_tidyverse <- donnees_tidyverse %>% 
  mutate(taille_id = nchar(identifiant))
donnees_tidyverse <- donnees_tidyverse %>% 
  mutate(taille_id = str_split(identifiant, '') %>% 
           lengths)
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
donnees_datatable[, taille_id := nchar(identifiant)]
```

## arrow/duckdb {.unnumbered .unlisted}
```{r}
requete_duckdb %>% mutate(taille_id = nchar(identifiant)) %>% select(taille_id) %>% print()
```

## pandas {.unnumbered .unlisted}
```{python, warning=FALSE, message=FALSE, results='hide', python.reticulate = FALSE}
donnees_python['taille_id'] = donnees_python['identifiant'].str.len()
```

:::

## Remplacer une chaîne de caractères par une autre

On souhaite remplacer le mot qualifie par le mot Qualifié.

::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
data A_Corriger;
  infile cards dsd dlm='|';
  format A_corriger $8.;
  input A_corriger $;
  cards;
  Qualifie
  qualifie
  Qualifie
  QUALIFIE
;
run;

data A_Corriger;
  set A_Corriger;
  Corrige = lowcase(A_corriger);
  Corrige = tranwrd(Corrige, "qualifie", "Qualifié");
run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Le mot Qualifié n'a pas d'accent : on le corrige
aCorriger <- c("Qualifie", "qualifie", "Qualifie", "QUALIFIE")

# [Q-q] permet de représenter Q ou q, et donc de prendre en compte Qualifie et qualifie
gsub("[Q-q]ualifie", "Qualifié", tolower(aCorriger))
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Le mot Qualifié n'a pas d'accent : on le corrige
aCorriger <- c("Qualifie", "qualifie", "Qualifie", "QUALIFIE")

# [Q-q] permet de représenter Q ou q, et donc de prendre en compte Qualifie et qualifie
aCorriger %>% tolower() %>% str_replace_all("[Q-q]ualifie", "Qualifié")
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Le mot Qualifié n'a pas d'accent : on le corrige
aCorriger <- c("Qualifie", "qualifie", "Qualifie", "QUALIFIE")

# [Q-q] permet de représenter Q ou q, et donc de prendre en compte Qualifie et qualifie
gsub("[Q-q]ualifie", "Qualifié", tolower(aCorriger))
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}
requete_duckdb %>% mutate(niveau = stringr::str_replace_all(niveau, "[Q-q]ualifie", "Qualifié")) %>% select(niveau)
```

## pandas {.unnumbered .unlisted}
```{python, warning=FALSE, message=FALSE, results='hide', python.reticulate = FALSE}
aCorriger = ["Qualifie", "qualifie", "Qualifie", "QUALIFIE"]
[re.sub(r'[qQ]ualifie', 'Qualifié', mot.lower()) for mot in aCorriger]
```

:::

## Extraire des éléments d'une chaîne de caractères

Le comportement de la fonction substr est différent entre `SAS` et `R` :

- en `SAS`, dans substr(extrait, 2, 3), le 2 correspond à la position du 1er caractère à récupérer, le 3 au nombre total de caractères extrait à partir du 2e => Le résultat est xtr

- en `R`, dans substr("extrait", 2, 3), le 2 correspond à la position du 1er caractère à récupérer, le 3 à la position du dernier caractère => Le résultat est "xt".

::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
data Exemple_texte;
  set Exemple_texte;
  
  /* Extraire les 2e, 3e et 4e caractère du mot extrait */
  /* Fonction tranwrd (TRANslate WoRD) */
  /* 2 correspond à la position du 1er caractère à récupérer, 3 le nombre total de caractères à partir du 2e */
  extrait = substr(extrait, 2, 3);
run;
proc print data = Exemple_texte;run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Extraire les 2e, 3e et 4e caractères de Concatener
# 2 correspond à la position du 1er caractère à récupérer, 5 la position du dernier caractère
extrait <- substr("extrait", 2, 5)
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Extraire les 2e, 3e et 4e caractères de Concatener
# 2 correspond à la position du 1er caractère à récupérer, 5 la position du dernier caractère
extrait <- str_sub("extrait", 2, 5)
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Extraire les 2e, 3e et 4e caractères de texte
# 2 correspond à la position du 1er caractère à récupérer, 5 la position du dernier caractère
extrait <- substr("extrait", 2, 5)
```

## arrow/duckdb {.unnumbered .unlisted}
```{r}
requete_duckdb %>% mutate(niveau = stringr::str_sub(niveau, 2, 5)) %>% select(niveau)
```

## pandas {.unnumbered .unlisted}
```{python, warning=FALSE, message=FALSE, results='hide', python.reticulate = FALSE}
# La position 1 en Python correspond au 2eme élément
extrait = "extrait"[1:5]
```

:::

## Enlever les blancs superflus d'une chaîne de caractères
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
data Exemple_texte;
  Texte = "              Ce   Texte   mériterait   d être   corrigé                  ";
run;

data Exemple_texte;
  set Exemple_texte;
  /* Enlever les blancs au début et à la fin de la chaîne de caractère */
  Enlever_Blancs_Initiaux = strip(Texte);
  
  /* Enlever les doubles blancs dans la chaîne de caractères */
  Enlever_Blancs_Entre = compbl(Enlever_Blancs_Initiaux);
  
  /* Enlever doubles blancs */
  /* REVOIR !!!!! */
  Enlever_Doubles_Blancs = compress(Texte, "  ", "t");
run;
proc print data = Exemple_texte;run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Enlever les blancs au début et à la fin de la chaîne de caractère
texte  <- "              Ce   Texte   mériterait   d être   corrigé   "

# "\\s+" est une expression régulière indiquant 1 ou plusieurs espaces successifs
# Le gsub remplace 1 ou plusieurs espaces successifs par un seul espace
# trimws enlève les espaces au début et à la fin d'une chaîne de caractère 
texte <- gsub("\\s+", " ", trimws(texte))
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Enlever les blancs au début et à la fin de la chaîne de caractère
texte  <- "              Ce   Texte   mériterait   d être   corrigé  "

# str_squish() supprime les espaces blancs au début et à la fin, et remplace tous les espaces blancs internes par un seul espace
texte <- str_squish(texte)
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Enlever les blancs au début et à la fin de la chaîne de caractère
texte  <- "              Ce   Texte   mériterait   d être   corrigé  "

# "\\s+" est une expression régulière indiquant 1 ou plusieurs espaces successifs
# Le gsub remplace 1 ou plusieurs espaces successifs par un seul espace
# trimws enlève les espaces au début et à la fin d'une chaîne de caractère 
texte <- gsub("\\s+", " ", trimws(texte))
```

## arrow/duckdb {.unnumbered .unlisted}
```{r}
requete_duckdb %>% mutate(niveau = stringr::str_squish(niveau)) %>% select(niveau)
```

## pandas {.unnumbered .unlisted}
```{python, warning=FALSE, message=FALSE, results='hide', python.reticulate = FALSE}
# Enlever les blancs au début et à la fin de la chaîne de caractère
texte = "              Ce   Texte   mériterait   d être   corrigé   "
texte = re.sub(r'\s+', ' ', texte).strip()
```

:::

## Concaténer des chaînes de caractères
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
data Exemple_texte;
  Texte1 = "Ce texte";
  Texte2 = "va être";
  Texte3 = "concaténé";
  Texte4 = "";
run;

data Exemple_texte;
  set Exemple_texte;
  
  /* Trois méthodes pour concaténer des chaînes de caractères */
  Concatener  = Texte1||" "||Texte2;
  Concatener2 = Texte1!!" "!!Texte2;
  Concatener3 = catx(" ", Texte1, Texte2);
  
  /* Effet des valeurs manquantes */
  /* Le séparateur est enlevé lors d'une concaténation avec une chaîne de caractère vide */
  Concatener4 = catx("-", Texte4, Texte3);
run;
proc print data = Exemple_texte;run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Concaténer des chaînes de caractères
texte1 <- "Ce texte"
texte2 <- "va être"
texte3 <- "concaténé"
texte4 <- ""

concatene <- paste(texte1, texte2, texte3, sep = " ")
paste0(texte1, " ", texte2, " ", texte3)

# Effet des valeurs manquantes : le délimiteur (ici -) apparaît avec la concaténation avec le caractère manquant
paste(texte4, texte3, sep = "-")
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Concaténer des chaînes de caractères
texte1 <- "Ce texte"
texte2 <- "va être"
texte3 <- "concaténé"
texte4 <- ""

concatene <- str_flatten(c(texte1, texte2, texte3), collapse = " ")

# Effet des valeurs manquantes : le délimiteur (ici -) apparaît avec la concaténation avec le caractère manquant
str_flatten(c(texte4, texte3), collapse = "-")
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Concaténer des chaînes de caractères
texte1 <- "Ce texte"
texte2 <- "va être"
texte3 <- "concaténé"
texte4 <- ""

concatene <- paste(texte1, texte2, texte3, sep = " ")
paste0(texte1, " ", texte2, " ", texte3)

# Effet des valeurs manquantes : le délimiteur (ici -) apparaît avec la concaténation avec le caractère manquant
paste(texte4, texte3, sep = "-")
```

## arrow/duckdb {.unnumbered .unlisted}
```{r}
requete_duckdb %>% mutate(niveau = paste0(niveau,niveau)) %>% select(niveau)
```

## pandas {.unnumbered .unlisted}
```{python, warning=FALSE, message=FALSE, results='hide', python.reticulate = FALSE}
# Concaténer des chaînes de caractères
texte1 = "Ce texte"
texte2 = "va être"
texte3 = "concaténé"
texte4 = ""

concatene = ' '.join([texte1, texte2, texte3])

# Effet des valeurs manquantes : le délimiteur (ici -) apparaît avec la concaténation avec le caractère manquant
'-'.join([texte4, texte3])
```

:::

## Transformer plusieurs caractères différents

Supprimer les accents, cédilles, caractères spéciaux.

::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
data Exemple_texte;
  set Exemple_texte;
  /* Transformer plusieurs caractères différents */
  /* On transforme le é en e, le â en a, le î en i, ... */
  texte = "éèêëàâçîô";
  texte_sans_accent = translate(texte, "eeeeaacio", "éèêëàâçîô");
run;
proc print data = Exemple_texte;run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Transformer plusieurs caractères différents
texte <- "éèêëàâçîô"
chartr("éèêëàâçîô", "eeeeaacio", texte)
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Transformer plusieurs caractères différents
texte <- "éèêëàâçîô"
chartr("éèêëàâçîô", "eeeeaacio", texte)
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Transformer plusieurs caractères différents
texte <- "éèêëàâçîô"
chartr("éèêëàâçîô", "eeeeaacio", texte)
```

## arrow/duckdb {.unnumbered .unlisted}
```{r}
requete_duckdb %>% mutate(niveau = strip_accents(niveau)) %>% select(niveau) # strip_accents est une fonction duckdb
# chartr n'est pas traduite en duckdb
```


## pandas {.unnumbered .unlisted}
```{python, warning=FALSE, message=FALSE, results='hide', python.reticulate = FALSE}
texte = "éèêëàâçîô"
texte.replace("éèêëàâçîô", "eeeeaacio")
```

:::

## Découper une chaîne de caractères selon un caractère donné

Découper une phrase selon les espaces pour isoler les mots.

::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
data Mots;
  delim = " ";
  Texte = "Mon texte va être coupé !";
  
  /* Chaque mot dans une variable */
  %macro Decouper;
    %do i = 1 %to %sysfunc(countw(Texte, delim));
	  Mot&i. = scan(Texte, &i., delim);
	%end;
  %mend Decouper;
  %Decouper;
  
  /* Les mots empilés */
  nb_mots = countw(Texte, delim);
  do nb = 1 to nb_mots;
    mots = scan(Texte, nb, delim);
    output;
  end;
run;
proc print data = Mots;run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
texte  <- "Mon texte va être coupé !"
unlist(strsplit(texte, split = " "))
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
texte  <- "Mon texte va être coupé !"
str_split(texte, pattern = " ") %>% unlist()
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
texte  <- "Mon texte va être coupé !"
unlist(strsplit(texte, split = " "))
```

## arrow/duckdb {.unnumbered .unlisted}

```{r}
requete_duckdb %>% mutate(niveau = string_split(niveau, " ")) %>% select(niveau) # string_split est une fonction duckdb
# `str_split()` is not available in this SQL variant
# strsplit n'est pas disponible non plus
```

N.B. On obtient une seule colonne contenant des listes (de chaînes de caractères). DuckDB sait gérer des types complexes dans des cases, tout comme `dplyr`, mais c'est plus difficile à manipuler.

## pandas {.unnumbered .unlisted}
```{python, warning=FALSE, message=FALSE, results='hide', python.reticulate = FALSE}
texte = "Mon texte va être coupé !"
texte.split()
```

:::

## Inverser une chaîne de caractères
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
data Mots;
  Texte = "Mon texte va être inversé !";
  x = left(reverse(Texte));
run;
proc print data = Mots;run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
texte <- "Mon texte va être inversé !"
inverserTexte <- function(x) {
  sapply(
    lapply(strsplit(x, NULL), rev),
    paste, collapse = "")
  }
inverserTexte(texte)
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(stringi)
texte <- "Mon texte va être inversé !"
stringi::stri_reverse(texte)
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
texte <- "Mon texte va être inversé !"
inverserTexte <- function(x) {
  sapply(
    lapply(strsplit(x, NULL), rev),
    paste, collapse = "")
}
inverserTexte(texte)
```

## arrow/duckdb {.unnumbered .unlisted}
```{r}
requete_duckdb %>% mutate(niveau = reverse(niveau)) %>% select(niveau) # reverse est une fonction duckdb
# stri_reverse : No known SQL translation
```

## pandas {.unnumbered .unlisted}
```{python, warning=FALSE, message=FALSE, results='hide', python.reticulate = FALSE}
texte = "Mon texte va être inversé !"
texte[::-1]
```

:::
