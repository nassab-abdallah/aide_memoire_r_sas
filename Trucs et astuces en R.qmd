---
title: "Trucs et astuces en `R`"
lang : fr
author:
  - name: Nassab ABDALLAH
    affiliation: Dares/SCS, <nassab.abdallah@travail.gouv.fr>
  - name: Damien EUZENAT
    affiliation: Dares/DIP, <damien.euzenat@travail.gouv.fr>
format:
  html:
    toc: true
    toc-expand: 1
    toc-depth: 2
    toc-location: left
    number-sections: true
    code-copy: true
    smooth-scroll: true
    link-external-icon:	true
    link-external-newwindow: true
    page-layout: full
    code-tools: true
    
# format : native
editor: source

embed-resources: true

syntax-definitions: 
  - sas.xml

# Summary for listings and search engines
description: |
  Trucs et astuces en `R`.

# Date published
date: "`r Sys.Date()`"
output:
  rmdformats::robobook:
    highlight: tango
    number_sections: true
  
categories:
  - R
---

::: justify
Voici quelques trucs et astuces utiles à connaître sur R, issus en partie des livres [The R Inferno](https://www.burns-stat.com/pages/Tutor/R_inferno.pdf) et [Advanced R](https://adv-r.hadley.nz/), à consulter pour plus de détails.
:::

# Le fonctionnement du langage `R`

## Les types d'objet

### Généralités

```{r, warning=FALSE, message=FALSE}
# En savoir plus sur ses données
data("cars")
typeof(cars)
class(cars)
mode(cars)
str(cars)
dim(cars)
c(is.data.frame(cars), is.list(cars), is.vector(cars), is.array(cars))
```

La notation L permet d'imposer à `R` de créer un nombre sous format `integer`, moins gourmand en mémoire (pour des raisons d'efficacité).

```{r, warning=FALSE, message=FALSE}
class(1)
class(1L)
```

### Les listes

```{r, warning=FALSE, message=FALSE}
# Créer une liste
liste <- list()

# Pré-allouer une liste de 3 éléments
liste <- vector(mode = "list", 3)
liste
```

```{r, warning=FALSE, message=FALSE}
# Ajouter un élément à une liste
liste <- list(1, 2)
# Il faut passer par cette syntaxe
liste <- c(liste, list(3))
liste
```

```{r, warning=FALSE, message=FALSE}
# Trier une liste
liste <- list("2" = 2, "0" = 0, "1" = 1)
liste
liste[order(names(liste))]
```

```{r, warning=FALSE, message=FALSE}
# Extraction de listes
liste <- list(nombres = 1:5, lettres = letters[1:5])
liste$nombres
```

```{r, warning=FALSE, message=FALSE}
# On veut faire appel à un élement de la liste à partir d'une variable extérieure
var <- "nombres"
```

```{r, warning=FALSE, message=FALSE}
# Ne marche pas, car nombres est en caractère
liste$var
```

```{r, warning=FALSE, message=FALSE}
# Fonctionne
liste[[var]]
```

```{r, warning=FALSE, message=FALSE}
# Sélection dans une liste
liste <- list(nombres = 1:5, lettres = letters[1:5])
liste["nombres"]
is.list(liste["nombres"])
liste[["nombres"]]
is.list(liste[["nombres"]])
```

```{r, warning=FALSE, message=FALSE}
# Suppression des éléments d'une liste
liste <- list(nombres = 1:5, lettres = letters[1:5])
liste[-1]
liste["nombres"] <- NULL
liste
```

```{r, warning=FALSE, message=FALSE}
# Dernier élément de chaque composante d'une liste
liste <- list(1:26, letters)
lapply(liste, tail, 1)
```

## Les affectations

### Généralités

```{r, warning=FALSE, message=FALSE}
# Importance des espaces
x<-3
# S'agit-il de ?
x <- 3
# Ou de ?
x < -3
# Il s'agit du premier cas !
x
```

```{r, warning=FALSE, message=FALSE}
# Les {} permettent de réaliser une affectation (<-) au sein d'un traitement plus complexe !
# Exemple ici : sommer les positions paires multipliées par 2 et les positions impaires multipliées par 3
sum({x <- 1:6 ; x[1:length(x) %% 2 == 0] <- x[1:length(x) %% 2 == 0] * 2 ; x[1:length(x) %% 2 != 0] <- x[1:length(x) %% 2 != 0] * 3 ; x})
```

```{r, warning=FALSE, message=FALSE}
# Afficher ou non la valeur de l'objet affecté pendant l'affectation
x <- pi
(x <- pi)
```

### Le comportement de l'opérateur `c()`

```{r, warning=FALSE, message=FALSE}
# c() est instable : c(x, y) n'est pas forcément du même type que c(y, x)
# format double
c(NA, Sys.Date())
# format Date
c(Sys.Date(), NA)
```

```{r, warning=FALSE, message=FALSE}
# Combiner des dates et date-times avec c() conduit à des résultats potentiellement incorrects
date <- as.Date("2025-01-01")
datetime <- as.POSIXct("2025-01-01 09:00")
# Correct
c(date, datetime)
# Incorrect
c(datetime, date)
```

```{r, warning=FALSE, message=FALSE}
# Valeurs manquantes
# Si le NA est placé avant, c() supprime tous les attributs
# Exemple 1
c(as.Date("2025-01-01"), NA)
c(NA, as.Date("2025-01-01"))
# Exemple 2
c(NA, as.POSIXct("2025-01-01 09:00"))
c(as.POSIXct("2025-01-01 09:00"), NA)
```

```{r, warning=FALSE, message=FALSE}
# c() convertit de character > complex > double > integer > logical
c(FALSE, 1L, 2.5)
c(FALSE, "x")
```

```{r, warning=FALSE, message=FALSE}
# Combiner 2 facteurs donne un integer
c(factor("a"), factor("b"))
```

```{r, warning=FALSE, message=FALSE}
# Data frames
# c() combines 2 data.frames dans une liste
df1 <- data.frame(x = 1)
df2 <- data.frame(x = 2)
str(c(df1, df1))
```

## Les comparaisons

```{r, warning=FALSE, message=FALSE, error=TRUE}
# Comparaisons multiples
x <- 0.5
# Correct
0 < x & x < 1
# Incorrect
0 < x < 1
```

```{r, warning=FALSE, message=FALSE}
# Opérations mathématiques
# Infini
1/0
# Nan = not a number
0/0
log(-1)
```

## Opérateurs de contrôle

```{r, warning=FALSE, message=FALSE}
# Conditions if / else
x <- 1
```

```{r, warning=FALSE, message=FALSE}
# Correct
if (identical(x, 1)) {
print("x est égal à 1")
} else {
print("x est différent de 1")
}
```

```{r, warning=FALSE, message=FALSE}
# Correct
if (identical(x, 1)) {print("x est égal à 1")
} else {print("x est différent de 1")}
```

```{r, warning=FALSE, message=FALSE}
# Correct
if (identical(x, 1)) print("x est égal à 1") else
print("x est différent de 1")
```

```{r, warning=FALSE, message=FALSE}
# Correct
if (identical(x, 1)) print("x est égal à 1") else print("x est différent de 1")
```

```{r, warning=FALSE, message=FALSE, error=TRUE}
# Incorrect
if (identical(x, 1)) print("x est égal à 1")
else print("x est différent de 1")
```

```{r, warning=FALSE, message=FALSE}
# Switch
# Fonctions et conditions if / else
condition <- function(langue = "Français") {
if (langue == "Français") {
  "salut"
} else if (langue == "Anglais") {
  "hello"
} else if (langue == "Russe") {
  "привет"
} else {
  stop("salut")
}
}
condition("Anglais")
```

```{r, warning=FALSE, message=FALSE}
# Autre possibilité avec switch, mais à réserver aux variables caractères !
condition <- function(langue = "Français") {
switch(langue,
       Français = "salut",
       Anglais = "hello",
       Russe = "привет",
       stop("salut")
)
}
condition("Français")
```

## Les valeurs manquantes

```{r, warning=FALSE, message=FALSE}
# Transformer les valeurs manquantes en 0
x <- data.frame(X1 = c(1, NA, 2), X2 = c(NA, NA, 3))
x
x[is.na(x)] <- 0
x
```

```{r, warning=FALSE, message=FALSE}
# Pour les valeurs manquantes, toujours utiliser is.na et non ==
NA == c(3, 1, 3, NA)
is.na(c(3, 1, 3, NA))
```

```{r, warning=FALSE, message=FALSE}
# Utiliser %in% et non == pour vérifier une appartenance à plusieurs variables
x1 <- 1:6
x1 == c(1, 5)
x1 %in% c(1, 5)
```

```{r, warning=FALSE, message=FALSE}
# Sélection de données en cas de valeurs manquantes
xna <- c(1, NA, 3, 2, 4, 2)
```

```{r, warning=FALSE, message=FALSE}
# Avec ce code, les NA sont conservés
xna[xna == 2]
```

```{r, warning=FALSE, message=FALSE}
# Code sans les NA
xna[!is.na(xna) & xna == 2]
```

```{r, warning=FALSE, message=FALSE}
# Code compact sans les NA
xna[which(xna == 2)]
```

```{r, warning=FALSE, message=FALSE}
# Incidence des NA dans le calcul de statistiques !
# Besoin de l'instruction na.rm = TRUE pour en supprimer l'incidence
x <- c(1, 5, 6, NA, 8)
mean(x)
mean(x, na.rm = TRUE)
max(x)
max(x, na.rm = TRUE)
```

```{r, warning=FALSE, message=FALSE}
# Une moyenne de NA donne NaN (Not a Number) avec na.rm = TRUE !
mean(c(NA, NA, NA), na.rm = TRUE)
# Et donne NA avec na.rm = FALSE !
mean(c(NA, NA, NA), na.rm = FALSE)
```

## Sélection d'éléments

```{r, warning=FALSE, message=FALSE}
# Le 1er élément est numéroté 1 et non 0 comme dans Python
x <- 1:3
x[c(0, 4)] <- c(-1, 9)
# Marche !!
for (i in 0:3) print(x[i])
```

```{r, warning=FALSE, message=FALSE}
# Cas où les noms ne sont pas uniques
x <- c(a = 1, b = 2, a = 3)
x["a"]
x[names(x) %in% "a"]
```

```{r, warning=FALSE, message=FALSE}
# Options drop = FALSE
x <- data.frame(X1 = c(1,2), X2 = c(3,4), x3 = c(5,6))
is.data.frame(x[, c(1,2)])
is.data.frame(x[, c(1)])
is.data.frame(x[, c(1), drop = FALSE])
```

```{r, warning=FALSE, message=FALSE}
# Fonction subset
x <- data.frame(x1 = c(1,2), x2 = c(3,4), x3 = c(5,6))
subset(x, select = x1)
subset(x, select = -x1)
```

```{r, warning=FALSE, message=FALSE}
# Correct
subset(x, x1 == 1)
```

```{r, warning=FALSE, message=FALSE}
# Incorrect
subset(x, x1 = 1)
```

```{r, warning=FALSE, message=FALSE, error=TRUE}
# Référence à des noms de colonne non usuels
df <- data.frame(x = rnorm(5), y = runif(5))
names(df) <- 1:2

# Correct
df$`1`

# Incorrect
df$1
```

```{r, warning=FALSE, message=FALSE}
# Utilisation de assign pour assigner une valeur à un objet en le désignant sous forme caractère
assign('objet', 3:5)
objet
for (i in 1:5) assign(paste('objet', i, sep = '_'), i)
objet_5
```

# Les grandes caractéristiques du langage `R`

## Principe de vectorisation

Une fonction vectorisée s'applique à tous les éléments du vecteur !!

```{r, warning=FALSE, message=FALSE}
# Exemple de vecteur
valeurs <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
valeurs <- 1:10
```

```{r, warning=FALSE, message=FALSE}
# Valeurs au carré
valeurs ** 2
```

```{r, warning=FALSE, message=FALSE}
# logarithme des valeurs
log(valeurs)
```

```{r, warning=FALSE, message=FALSE}
# Maximum des valeurs
max(valeurs)
```

```{r, warning=FALSE, message=FALSE}
# Limite des valeurs
range(valeurs)
```

```{r, warning=FALSE, message=FALSE}
# Correct
mean(valeurs)
```

```{r, warning=FALSE, message=FALSE}
# Correct
mean(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
```

```{r, warning=FALSE, message=FALSE}
# Inattendu
mean(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
```

```{r, warning=FALSE, message=FALSE}
# Attention aux parenthèses !
n <- 10
# Inattendu ! Correspond à (1-1, 2-1, 3-1, ..., 10-1)
1:n-1
# Correct
1:(n-1)
```

```{r, warning=FALSE, message=FALSE}
# Minimum ou maximum élément par élément
x1 <- c(1, 2, 5, 6, 8)
x2 <- c(4, 0, 7, 2, 1)
# Minimum : 2 possibilités
pmin(x1, x2)
mapply(min, x1, x2)
# Maximum : 2 possibilités
pmax(x1, x2)
mapply(max, x1, x2)
```

```{r, warning=FALSE, message=FALSE}
# Calculer (x - min) / (max - min) pour chaque élément x d'un vecteur
x <- c(1,2,3)
sapply(x, function(xi, mn, mx) {(xi - mn) / (mx - mn)}, mn = min(x), mx = max(x))
```

## Principe de coercion

Dans les comparaisons, les objets R sont successivement convertis en `logical`, `integer`, `numeric`, `complex` et `character`, jusqu'à ce que la comparaison puisse se faire.

```{r, warning=FALSE, message=FALSE}
# TRUE / FALSE est transformé en integer (1 / 0)
TRUE == 1
TRUE == 2
FALSE == 0
```

```{r, warning=FALSE, message=FALSE}
# TRUE est convertit en character
TRUE == "1"
```

```{r, warning=FALSE, message=FALSE}
# 5 est convertit en character
5 < '7'
```

```{r, warning=FALSE, message=FALSE}
# 50 est convertit en character
50 < '7'
```

## Principe de recycling

En `R Base`, quand 2 vecteurs ne sont pas de même taille, le plus court vecteur est recyclé pour être de même taille que le plus long vecteur.

```{r}
# Si la taille du plus long vecteur est un entier multiple de la taile du plus court, R n'affiche pas d'avertissement
x <- c(1, 2, 3)
y <- c(1, 2, 3, 4, 5, 6)
x + y
```

```{r}
# Si la taille du plus long vecteur n'est pas un entier multiple de la taille du plus court, R affiche un avertissement
x <- c(1, 2, 3)
y <- c(1, 2, 3, 4, 5, 6, 7)
x + y
```

```{r}
# Mais certaines fonctions pratiquent le recycling sans avertissement
paste(1:3, 1:2)
ifelse(1:3, 1:2, 1:2)
```

```{r}
# Et data.frame() renvoie une erreur
#data.frame(1:2, 1:3)
```

# Le saviez-vous ?

## Effets des calculs en virgule flottante

```{r, warning=FALSE, message=FALSE}
sqrt(2) ^ 2 == 2
1 / 49 * 49 == 1
.1 == .3 / 3
seq(0, 1, by=.1) == .3
unique(c(.3, .4 - .1, .5 - .2, .6 - .3, .7 - .4))
```

## Obtenir de l'informations sur `R`

```{r, warning=FALSE, message=FALSE, results='hide'}
# Informations sur la session de R
sessionInfo()
Sys.info()
.Platform

# Version de R
R.version.string
getRversion()

# Lien vers le bureau de l'utilisateur
file.path(Sys.getenv("USERPROFILE"),"Desktop")

# Chemin de l'exécutable R est-il installé ?
R.home("bin")

# Où sont installés les packages R
.libPaths()

# Version d'un package installé (ici openxlsx)
# packageVersion("openxlsx")
```

## Le pipe sur R

Cet opérateur permet d'enchaîner les opérations et d'avoir un code plus lisible.

Il existe différents types :

-   **Le pipe de Rbase :** `|>`

-   **Le pipe du tidyverse :** `%>%`

Les deux pipes fonctionnent de la même manière mais diffèrent sur les points suivants :

+-----------------------------------------------+---------------------------+-----------------------------------------------------------------------+
| Thème                                         | `|>`                      | `%>%`                                                                 |
+===============================================+===========================+=======================================================================+
| Placeholder (pour indiquer où placer l'objet) | `_`                       | `.`                                                                   |
|                                               |                           |                                                                       |
|                                               | `x |> f(y, a = _)`        | `x %>% f(y, a = .)`                                                   |
+-----------------------------------------------+---------------------------+-----------------------------------------------------------------------+
| Package                                       | Aucun : directement sur R | Magrittr (pipe disponible lorsqu'on effectue `library(tidyverse)`) \| |
+-----------------------------------------------+---------------------------+-----------------------------------------------------------------------+
| Fonction                                      | Impossible                | Possible                                                              |
+-----------------------------------------------+---------------------------+-----------------------------------------------------------------------+
| Temps de calcul                               | Rapide                    | Plus lent                                                             |
+-----------------------------------------------+---------------------------+-----------------------------------------------------------------------+
| Opérateurs                                    | `|>`                      | `%>%` `%<>%` `%$%` `%!>%` `%T>%`                                      |
+-----------------------------------------------+---------------------------+-----------------------------------------------------------------------+

*Source* :

-   <https://larmarange.github.io/guide-R/manipulation/pipe.html#le-pipe-natif-de-r>

## Conseils divers

Le format en résultat de `sapply` est imprévisible :

```{r, warning=FALSE, message=FALSE}
# integer
sapply(1L, function(x) c(x, x))
# list
sapply(integer(), function(x) c(x, x))
```

Le résultat de `ifelse()` dépend du format de la condition :

```{r, warning=FALSE, message=FALSE}
# logical
ifelse(NA, 1L, 1L)
# integer
ifelse(FALSE, 1L, 1L)
```

La fonction `if` utilisée sans `else` renvoie `NULL` si la condition est `FALSE`. Ceci permet d'écrire de façon élégante des conditions simples. Par exemple, prendre en compte un s final à un nom seulement si la valeur est strictement supérieure à 1 :

```{r, warning=FALSE, message=FALSE}
NombreDeLignes <- function(baseDeDonnees) {
  ligne <- nrow(baseDeDonnees)
  paste0(ligne, " ligne", if (ligne > 1) "s")
}
NombreDeLignes(mtcars)
NombreDeLignes(mtcars[1,])
```

Pré-allouer un vecteur de dimension 3 :

```{r, warning=FALSE, message=FALSE}
x <- rep(NA, 3)
```

## List-comprehensions en `R`

Equivalent des list-comprehensions de `Python` en `R` !

```{r, warning=FALSE, message=FALSE}
# Equivalent des list-comprehensions de Python en R
# Somme des entiers de 1 à 1 000 multiples de 3 ou 5, en une ligne !
# 4 manières de faire
sum({l <- 1:1000 ; l[l %% 3 == 0 | l %% 5 == 0]})
sum({l <- 1:1000 ; l[seq_along(l) %% 3 == 0 | seq_along(l) %% 5 == 0]})
sum(l<-(1:1000)[l %% 3 == 0 | l %% 5 == 0])
sum((1:1000)[(1:1000 %% 3) == 0 | (1:1000 %% 5) == 0])
```

# Fonctions utiles

## Ramasse-miettes (Garbage Collector)

Si la mémoire vive de l'ordinateur est saturée, on peut essayer de la "purger" en utilisant la fonction `gc()` de `R`.

```{r, warning=FALSE, message=FALSE}
gc()
```

## La fonction `subset()`

La fonction `subset()` présente deux intérêts par rapport à la sélection avec `[` :

-   les lignes où la condition évaluée est `NA` sont retirées :

```{r, warning=FALSE, message=FALSE}
exemple_subset <- data.frame(x = c(1, 2, NA), y = c("a", "b", "c"))
# Avec []
exemple_subset[exemple_subset$x == 1, ]
# Avec subset()
subset(exemple_subset, x == 1)
```

-   l'option par défaut est `drop = FALSE`, ce qui garantit que la base de résultat est un dataframe :

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
exemple_subset <- data.frame(x = c(1, 2, NA), y = c("a", "b", "c"))
# Avec []
exemple_subset[exemple_subset$x == 1, "x"] %>% is.data.frame()
# Avec subset()
subset(exemple_subset, x == 1, x) %>% is.data.frame()
```

## Les fonctions `try()` et `tryCatch()`

La fonction `try()` permet de poursuivre le programme malgré la survenue d'une erreur. Dans l'exemple suivant, le programme affiche bien "Suite du programme" malgré l'erreur au code précédent.

```{r, warning=FALSE, message=FALSE}
try(log("x")) ; print("Suite du programme")
```

La fonction `tryCatch()` est plus élaborée, et permet de programmer une valeur par défaut en cas d'erreur.

```{r, warning=FALSE, message=FALSE}
FonctionLog <- function(x) {
  tryCatch(
    error = function(cnd) NA,
    log(x)
  )
}
```

La fonction renvoie un `NA` si la fonction `log()` ne peut pas être appliquée, comme c'est le cas sur l'exemple pour la valeur "a".

```{r, warning=FALSE, message=FALSE}
FonctionLog(1)
FonctionLog("x")
```

## Les fonctions `sort()`, `order()` et `rank()`

`sort()` trie un vecteur par ordre croissant. `rank()` donne le rang de chaque élément du vecteur, le plus petit élément se voyant attribué le rang 1. `order()` renvoie l'indice du vecteur trié par ordre croissant.

```{r, warning=FALSE, message=FALSE}
vecteur <- c(5,3,1,2,4)
sort(vecteur)
order(vecteur)
rank(vecteur)
```

Une autre solution que `sort()` pour trier un vecteur est :

```{r, warning=FALSE, message=FALSE}
vecteur <- c(5,3,1,2,4)
vecteur[order(vecteur)]
```

À noter aussi que `sort()` permet aussi d'exécuter simultanément les fonctions `sort()` et `order()`. Ainsi :

```{r, warning=FALSE, message=FALSE}
vecteur <- c(5,3,1,2,4)
sort(vecteur, index.return = TRUE)
# Fonction sort()
sort(vecteur, index.return = TRUE)$x
sort(vecteur)
# Fonction order()
sort(vecteur, index.return = TRUE)$ix
order(vecteur)
```

## Les fonctions `:`, `seq()`, `seq_len()` et `seq_along()`

```{r, warning=FALSE, message=FALSE}
# Ne pas confondre !
seq(0:10)
0:10
seq(0, 10)
```

```{r, warning=FALSE, message=FALSE}
# Privilégier seq_len à : lorsqu'il y a un risque de 0
# Fonctionnement identique
n <- 5
1:n
seq_len(n)
# Problème avec les 0
n <- 0
1:n
seq_len(n)
```

```{r, warning=FALSE, message=FALSE}
# Préférer seq_along à : au cas où la taille de l'objet est 0
x <- c() ;length(x)
for (i in 1:length(x)) print(i)
for (i in seq_along(x)) print(i)
for (i in seq(along=x)) print(i)
```

```{r, warning=FALSE, message=FALSE}
# Différences seq, seq_len et seq_along

# seq : créé une séquence d'éléments successifs, espacés éventuellement d'un pas
seq(from = 1, to = 10, by = 2)
seq(1, 10, 2)

# seq_len : créé une séquence d'éléments de 1 jusqu'au paramètre de la fonction (supposé positif)
seq_len(10)

# seq_along : créé une séquence d'éléments de 1 jusqu'au nombre d'éléments du vecteur
seq_along(c(7,9,1,0))

# seq se comporte comme seq_along si le vecteur comprend plusieurs éléments, et comme seq_len s'il comprend un seul élément

# Plusieurs éléments
vecteur <- c(10, 20, 30)
seq_along(vecteur)
seq_len(vecteur)
seq(vecteur)

# Un seul élement
vecteur <- 10
seq_along(vecteur)
seq_len(vecteur)
seq(vecteur)
```

## Fonction pour copier des données R dans le presse-papier et les coller (par exemple dans Excel)

Pour coller des données de R dans Excel, on peut :

-   faire passer la fonction `R` `CopierColler()` proposée ci-dessous sur les données `R` que l'on souhaite copier dans Excel ;
-   puis coller le presse-papier directement dans Excel.

La fonction peut être assez pratique.

```{r, warning=FALSE, message=FALSE}
# Copier des données dans le presse-papier
x <- mtcars
CopierColler <- function(x, row.names = FALSE, col.names = TRUE, dec = ",", na = "", sep = "\t", quote = FALSE, ...) {
  write.table(x, "clipboard", sep = sep, row.names = row.names, col.names = col.names, dec = dec, na = na, quote = quote, ...)
}
# Fonctionne sous système Windows, pas Linux
#CopierColler(x)
```

## Fonctions diverses

`browseURL()` lance une page Internet.

Outils de débogage :

```{r, warning=FALSE, message=FALSE}
# Outils de debogage
options(error = recover)
options(error=NULL)
```

Fonction `dput()`

```{r, warning=FALSE, message=FALSE}
# Créer un objet sous forme de code R !
data("mtcars")
dput(mtcars)
```

Fonction `tribble()`

```{r, warning=FALSE, message=FALSE}
# En tidyverse, la fonction tribble peut être utile pour créer des bases lignes par lignes
library(tidyverse)
tribble(
  ~x, ~y,
  "a",   1,
  "b",   2
)
```

```{r, warning=FALSE, message=FALSE}
# Définir ses propres opérateurs
# R reconnait le texte entre %% comme un opérateur binaire
# Exemple, simplifier la fonction paste
'%+%' <- function(x, y) { paste(x, y, sep = "") }
"Groupe_" %+% 0:9
```

```{r, warning=FALSE, message=FALSE}
# Récupérer les éléments à la diagonale d'un dataframe
diag(as.matrix(mtcars))
```

```{r, warning=FALSE, message=FALSE}
# S'assurer qu'un objet R existe déjà
exists("mtcars")
```

```{r, warning=FALSE, message=FALSE}
# Penser au print
for (i in 1:5) i
for (i in 1:5) print(i)
```

```{r, warning=FALSE, message=FALSE}
# Différences print et cat
cat("Salut !\nComment vas-tu ?")
print("Salut !\nComment vas-tu ?")
```

## Quelques fonctions mathématiques

`integrate()` calcule l'aire sous la courbe $f()$.

```{r, warning=FALSE, message=FALSE}
integrate(sin, 0, pi / 2)
```

`uniroot()` trouve la valeur de $x$ telle que $f(x) = 0$.

```{r, warning=FALSE, message=FALSE}
uniroot(function(x) x ** 3, c(-1, 1))
```

`optimise()` trouve le maximum ou le minimum d'une fonction sur un intervalle donné.

```{r, warning=FALSE, message=FALSE}
optimise(function(x) -x ** 2, c(-1, 1), maximum = TRUE)
```

## Ajouter des guillemets dans une chaîne de caractères

La fonction `shQuote()` permet d'ajouter des guillemets dans une chaîne de caractères sous Windows.

```{r, warning=FALSE, message=FALSE}
paste("valeur =", shQuote("10"))
```

# Importer rapidement un fichier `R` dans `SAS`

Le format de données `SAS` étant propriétaire, il n'est pas possible de créer directement en `R` des bases `SAS` d'extension `.sas7bdat`. Une solution relativement rapide pour importer une base `R` en `SAS` est de passer par le format intermédiaire `.xpt` qui conserve les noms et formats des variables.

## Copie de la base `R` en format `xpt`

Il faut d'abord copier la base `R` en format `xpt` en utilisant la fonction `write_xpt()` du package `haven`. Pour que la manipulation proposée ici fonctionne, il faut bien veiller à ce que la version du `xpt` soit la version 5.

```{r, warning=FALSE, message=FALSE}
#| eval: false
# On copie la base mtcars en format xpt sur le bureau de l'utilisateur
haven::write_xpt(mtcars, file.path(Sys.getenv("USERPROFILE"), "Desktop", "mtcars.xpt"), version = 5)
```

## Import de la base `xpt` en `SAS`

La base `R` copiée en format `xpt` peut ensuite être importée en `SAS` avec le code suivant :

``` sas
libname xptfile xport "C:\Users\&sysuserid.\Desktop\mtcars.xpt";
proc copy inlib = xptfile outlib = work;
run;
```

Par défaut, la base est nommée du nom de la base `xpt` et se trouve dans la `work` de `SAS`, mais `outlib` peut être paramétré avec une autre libname.
