# Tableaux de contingence (`proc freq` de `SAS`) pour 2 variables 

Cette tâche, immédiate en `SAS`, est plus complexe à réaliser en `R`. Plusieurs stratégies, avec et sans packages, sont proposées ici.

## Tableaux de contingence pour 2 variables

::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
proc freq data = donnees_sas;
  tables Sexe * CSP / missing;
  format Sexe sexef. CSP $cspf.;
run;

/* Tableau de contingence (tableau croisé) sans les proportions lignes, colonnes et totales */
proc freq data = donnees_sas;
  tables CSP * Sexe  / missing nofreq norow nocol;
  format Sexe sexef. CSP $cspf.;
run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Tableau simple
table(donnees_rbase$cspf, donnees_rbase$sexef, useNA = "always")
# Tableau avec les sommes
addmargins(table(donnees_rbase$cspf, donnees_rbase$sexef, useNA = "always"))

# Proportions
tab <- table(donnees_rbase$cspf, donnees_rbase$sexef, useNA = "always")
# Proportions par case
addmargins(prop.table(tab)) * 100
# Proportions par ligne
addmargins(prop.table(tab, margin = 1)) * 100
# Proportions par colonne
addmargins(prop.table(tab, margin = 2)) * 100

# Solution alternative, sans pondération
tab <- xtabs(~ cspf + sexef, data = donnees_rbase)
addmargins(prop.table(tab)) * 100
addmargins(prop.table(tab, margin = 1), margin = 2) * 100
addmargins(prop.table(tab, margin = 2), margin = 1) * 100
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Tableau de fréquence
tab <- donnees_tidyverse %>% 
  group_by(cspf, sexef) %>% 
  summarise(prop = n(), .groups = "drop_last") %>% 
  ungroup() %>% 
  mutate(prop = prop / sum(prop) * 100) %>%
  spread(sexef, prop) %>% 
  mutate(Total = rowSums(across(where(is.numeric)), na.rm = TRUE))
tab <- bind_rows(tab, tab %>% 
                   summarise(across(where(is.numeric), \(x) sum(x, na.rm = TRUE)),
                             across(where(is.character), ~"Total"))
)
tab

# Proportions par ligne
donnees_tidyverse %>% 
  group_by(cspf, sexef) %>% 
  summarise(prop = n()) %>% 
  mutate(prop = prop / sum(prop) * 100) %>% 
  spread(sexef, prop)

# Proportions par colonne
donnees_tidyverse %>% 
  group_by(sexef, cspf) %>% 
  summarise(prop = n()) %>% 
  mutate(prop = prop / sum(prop) * 100) %>% 
  spread(sexef, prop)
```

## data.table {.unnumbered .unlisted}

1ère solution

```{r, warning=FALSE, message=FALSE, results='hide'}
# Tableau simple
donnees_datatable[, table(cspf, sexef, useNA = "always") ]
# Tableau avec les sommes
donnees_datatable[, addmargins(table(cspf, sexef, useNA = "always")) ]
# Proportions
tab <- donnees_datatable[, table(cspf, sexef, useNA = "always") ]
# Proportions par case
addmargins(prop.table(tab)) * 100
# Proportions par ligne
addmargins(prop.table(tab, margin = 1)) * 100
# Proportions par colonne
addmargins(prop.table(tab, margin = 2)) * 100
```

2e solution

```{r, warning=FALSE, message=FALSE, results='hide'}
# Solution alternative, sans pondération
tab <- donnees_datatable[, xtabs(~ cspf + sexef, data = donnees_datatable) ]
tab
addmargins(prop.table(tab)) * 100
addmargins(prop.table(tab, margin = 1), margin = 2) * 100
addmargins(prop.table(tab, margin = 2), margin = 1) * 100
```

3e solution

```{r, warning=FALSE, message=FALSE, results='hide'}
# Autre solution, avec les Grouping sets
tab <- data.table::cube(donnees_datatable, .(Nb = .N), by = c("cspf", "sexef"))
tab <- data.table::dcast(tab, cspf ~ sexef, value.var = "Nb")
# On harmonise le tableau
tab <- rbind(tab[2:nrow(tab)], tab[1,])
setcolorder(tab, c(setdiff(names(tab), "NA"), "NA"))
# On renomme la ligne et la colonne des totaux
tab[nrow(tab), 1] <- "Total"
names(tab)[which(names(tab) == "NA")] <- "Total"
tab
```

4e solution

```{r, warning=FALSE, message=FALSE, results='hide'}
# Autre façon d'utiliser les méthodes de data.table
tab_prop <- data.table::dcast(donnees_datatable, cspf ~ sexef, fun.aggregate = length)
# Proportion par ligne
tab_prop[, .SD / Reduce(`+`, .SD), cspf]
# Proportion par colonne
cols <- unique(donnees_datatable[, (sexef)])
tab_prop[, (lapply(.SD, function(col) col / sum(col))), .SDcols = cols]

# Pour avoir les sommes lignes
# À FAIRE : ne marche pas, à revoir !
#tab_prop <- data.table::dcast(donnees_datatable, cspf ~ sexef, fun.aggregate = length)
#tab_prop[, Total := rowSums(.SD), .SDcols = is.numeric]
#tab_prop <- rbind(tab_prop, tab_prop[, c(cspf = "Total", lapply(.SD, sum, na.rm = TRUE)),
#                                     .SDcols = is.numeric],
#                  fill = TRUE)
#tab_prop[, (lapply(.SD, function(col) col / sum(col))), .SDcols = -1]
## Pour avoir les sommes colonnes
#tab[, sum(.SD), by = 1:nrow(tab), .SDcols = is.numeric]
#tab[, (lapply(.SD, function(col) col / sum(col))), .SDcols = -1]
#
## Autre solution plus pratique avec data.table
## Manipuler des formules sur R
#variable <- c("cspf", "sexef")
#formule <- as.formula(paste(paste(variable, collapse = " + "), ".", sep = " ~ "))
#tab_prop <- data.table::dcast(donnees_datatable, formule, fun.aggregate = length)
#colnames(tab_prop)[colnames(tab_prop) == "."] <- "total"
#tab_prop[, prop := total / sum(total)]
## Le tableau est remis sous forme croisée
#tab_prop <- dcast(tab_prop, cspf ~ sexef, value.var = c("prop"), fill = 0)
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Tableau de contingence avec pondération
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
proc freq data = donnees_sas;
  tables Sexe * CSP / missing;
  format Sexe sexef. CSP $cspf.;
  weight poids_sondage;
run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
tab <- xtabs(poids_sondage ~ cspf + sexef, data = donnees_rbase, addNA = TRUE)
tab
addmargins(prop.table(tab)) * 100
addmargins(prop.table(tab, margin = 1), margin = 2) * 100
addmargins(prop.table(tab, margin = 2), margin = 1) * 100
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Avec la fonction count
donnees_tidyverse %>% 
  count(cspf, sexef, wt = poids_sondage, name = "prop") %>% 
  ungroup() %>% 
  mutate(prop = prop / sum(prop) * 100) %>% 
  spread(sexef, prop)

# Avec la fonction summarise
donnees_tidyverse %>% 
  group_by(cspf, sexef) %>% 
  summarise(prop = sum(poids_sondage, na.rm = TRUE)) %>% 
  ungroup() %>% 
  mutate(prop = prop / sum(prop) * 100) %>% 
  spread(sexef, prop)

# Avec ajout des sommes par ligne et colonne
tab <- donnees_tidyverse %>% 
  count(cspf, sexef, wt = poids_sondage, name = "prop") %>% 
  ungroup() %>% 
  mutate(prop = prop / sum(prop) * 100) %>% 
  pivot_wider(names_from = sexef, values_from = prop) %>% 
  # Somme par ligne
  mutate(Total = rowSums(across(where(is.numeric)), na.rm = TRUE))
# Somme par colonne
tab <- bind_rows(tab, tab %>% 
                   summarise(across(where(is.numeric), sum, na.rm = TRUE),
                             across(where(is.character), ~"Total"))
            )
tab
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
tab <- donnees_datatable[, xtabs(poids_sondage ~ cspf + sexef, data = donnees_datatable, addNA = TRUE) ]
tab
addmargins(prop.table(tab)) * 100
addmargins(prop.table(tab, margin = 1), margin = 2) * 100
addmargins(prop.table(tab, margin = 2), margin = 1) * 100
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Copier-coller le tableau dans un tableur (Excel, etc.)
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
/* Copier-coller le résultat sur la fenêtre html "Results Viewer" */
proc freq data = donnees_sas;
  tables Sexe * CSP / missing chisq;
  format Sexe sexef. CSP $cspf.;
run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# On utilise les packages knitr et kableExtra
library(knitr)
library(kableExtra)

# Création d'un tableau
tab <- xtabs(~ cspf + sexef, data = donnees_rbase)
tab <- addmargins(prop.table(tab)) * 100

# Afficher de façon plus jolie un tableau
knitr::kable(tab)

# Copier-coller le résultat vers Excel
# Il suffit d'appliquer ce code ....
kableExtra::kable_paper(kableExtra::kbl(tab), "hover", full_width = F)
# ... et de copier-coller le résultat de la fenêtre Viewer vers Excel
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# On utilise les packages knitr et kableExtra
library(knitr)
library(kableExtra)

# Création d'un tableau
tab <- donnees_tidyverse %>% 
  group_by(cspf, sexef) %>% 
  summarise(prop = n(), .groups = "drop_last") %>% 
  ungroup() %>% 
  mutate(prop = prop / sum(prop) * 100) %>% 
  spread(sexef, prop)

# Afficher de façon plus jolie un tableau
tab %>% knitr::kable()

# Copier-coller le résultat vers Excel
# Il suffit d'appliquer ce code ....
tab %>% 
  knitr::kable() %>% 
  kableExtra::kable_paper("hover", full_width = F)
# ... et de copier-coller le résultat de la fenêtre Viewer vers Excel
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# On utilise les packages knitr et kableExtra
library(knitr)
library(kableExtra)

# Création d'un tableau
tab <- donnees_datatable[, xtabs(poids_sondage ~ cspf + sexef, data = donnees_datatable, addNA = TRUE) ]
tab <- addmargins(prop.table(tab)) * 100

# Afficher de façon plus jolie un tableau
knitr::kable(tab)

# Copier-coller le résultat vers Excel
# Il suffit d'appliquer ce code ....
kableExtra::kable_paper(kableExtra::kbl(tab), "hover", full_width = F)
# ... et de copier-coller le résultat de la fenêtre Viewer vers Excel
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Tests d'associaton (Chi-Deux, etc.)
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
proc freq data = donnees_sas;
  tables Sexe * CSP / missing chisq;
  format Sexe sexef. CSP $cspf.;
run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Test du Khi-Deux
with(donnees_rbase, chisq.test(cspf, sexef))
summary(table(donnees_rbase$cspf, donnees_rbase$sexef))
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Test du Khi-Deux
chisq.test(donnees_tidyverse %>% pull(cspf), donnees_tidyverse %>% pull(sexef))
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Test du Khi-Deux
donnees_datatable[, chisq.test(cspf, sexef)]
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Solutions avec package `R` permettant de pondérer

Autre possibilité, avec package `R`, pour avoir la même présentation que la `proc freq` de `SAS`.

5 packages paraissent pertinents : `descr`, `flextable`, `questionr`, `survey`, `procs`.

Des informations sur l'usage des packages en `R` sont disponibles sur le site Utilit'R : <https://book.utilitr.org/03_Fiches_thematiques/Fiche_comment_choisir_un_package.html>.

### Package `descr`

Lien vers la documentation : <https://cran.r-project.org/web/packages/descr/descr.pdf>.

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
/* Sans objet pour SAS */
proc freq data = donnees_sas;
  tables Sexe * CSP / missing;
  format Sexe sexef. CSP $cspf.;
  weight poids_sondage;
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(descr)
# Non pondéré
with(donnees_rbase, descr::crosstab(cspf, sexef,                         prop.r = TRUE, prop.c = TRUE, prop.t = TRUE))
# Pondéré
with(donnees_rbase, descr::crosstab(cspf, sexef, weight = poids_sondage, prop.r = TRUE, prop.c = TRUE, prop.t = TRUE))
# Sans les proportions par ligne et colonne
with(donnees_rbase, descr::crosstab(cspf, sexef, weight = poids_sondage, prop.r = FALSE, prop.c = FALSE, prop.t = TRUE))
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(descr)
# Non pondéré
with(donnees_tidyverse, descr::crosstab(cspf, sexef,                         prop.r = TRUE, prop.c = TRUE, prop.t = TRUE))
# Pondéré
with(donnees_tidyverse, descr::crosstab(cspf, sexef, weight = poids_sondage, prop.r = TRUE, prop.c = TRUE, prop.t = TRUE))
# Sans les proportions par ligne et colonne
with(donnees_tidyverse, descr::crosstab(cspf, sexef, weight = poids_sondage, prop.r = FALSE, prop.c = FALSE, prop.t = TRUE))
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(descr)
# Non pondéré
donnees_datatable[, descr::crosstab(cspf, sexef,                         prop.r = TRUE, prop.c = TRUE, prop.t = TRUE)]
# Pondéré
donnees_datatable[, descr::crosstab(cspf, sexef, weight = poids_sondage, prop.r = TRUE, prop.c = TRUE, prop.t = TRUE)]
# Sans les proportions par ligne et colonne
donnees_datatable[, descr::crosstab(cspf, sexef, weight = poids_sondage, prop.r = FALSE, prop.c = FALSE, prop.t = TRUE)]
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

### Package `flextable`

Lien vers la documentation :

- <https://ardata-fr.github.io/flextable-book/crosstabs.html>
- <https://cran.r-project.org/web/packages/flextable/flextable.pdf>

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
/* Sans objet pour SAS */
proc freq data = donnees_sas;
  tables Sexe * CSP / missing;
  format Sexe sexef. CSP $cspf.;
  weight poids_sondage;
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(flextable)
# Non pondéré
flextable::proc_freq(donnees_rbase, "cspf", "sexef")
# Pondéré
flextable::proc_freq(donnees_rbase, "cspf", "sexef", weight = "poids_sondage")
# Sans les proportions par ligne et colonne
flextable::proc_freq(donnees_rbase, "cspf", "sexef", weight = "poids_sondage", include.row_percent = FALSE, include.column_percent = FALSE)
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(flextable)
# Non pondéré
flextable::proc_freq(donnees_tidyverse, "cspf", "sexef")
# Pondéré
flextable::proc_freq(donnees_tidyverse, "cspf", "sexef", weight = "poids_sondage")
# Sans les proportions par ligne et colonne
flextable::proc_freq(donnees_tidyverse, "cspf", "sexef", weight = "poids_sondage", include.row_percent = FALSE, include.column_percent = FALSE)
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(flextable)
# Non pondéré
flextable::proc_freq(donnees_datatable, "cspf", "sexef")
# Pondéré
flextable::proc_freq(donnees_datatable, "cspf", "sexef", weight = "poids_sondage")
# Sans les proportions par ligne et colonne
flextable::proc_freq(donnees_datatable, "cspf", "sexef", weight = "poids_sondage", include.row_percent = FALSE, include.column_percent = FALSE)
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

### Package `questionr`

Lien vers la documentation : <https://cran.r-project.org/web/packages/questionr/questionr.pdf>.

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
/* Sans objet pour SAS */
proc freq data = donnees_sas;
  tables Sexe * CSP / missing;
  format Sexe sexef. CSP $cspf.;
  weight poids_sondage;
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(questionr)
# Tableau croisé
# Sans pondération
tab <- with(donnees_rbase, questionr::wtd.table(cspf, sexef, useNA = "ifany"), na.rm = TRUE)
# Avec pondération
tab <- with(donnees_rbase, questionr::wtd.table(cspf, sexef, weights = poids_sondage, useNA = "ifany"), na.rm = TRUE)
tab
# Proportions
questionr::prop(tab)
# Proportions colonnes
questionr::cprop(tab)
# Proportions lignes
questionr::rprop(tab)
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Sans pondération
library(questionr)
# Tableau croisé
# Sans pondération
tab <- with(donnees_tidyverse, questionr::wtd.table(cspf, sexef, useNA = "ifany"), na.rm = TRUE)
# Avec pondération
tab <- with(donnees_tidyverse, questionr::wtd.table(cspf, sexef, weights = poids_sondage, useNA = "ifany"), na.rm = TRUE)
tab
# Proportions
questionr::prop(tab)
# Proportions colonnes
questionr::cprop(tab)
# Proportions lignes
questionr::rprop(tab)
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Sans pondération
library(questionr)
# Tableau croisé
# Sans pondération
tab <- donnees_datatable[, questionr::wtd.table(cspf, sexef, useNA = "ifany")]
# Avec pondération
tab <- donnees_datatable[, questionr::wtd.table(cspf, sexef, weights = poids_sondage, useNA = "ifany")]
tab
# Proportions
questionr::prop(tab)
# Proportions colonnes
questionr::cprop(tab)
# Proportions lignes
questionr::rprop(tab)
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

### Package `survey`

Lien vers la documentation : <https://cran.r-project.org/web/packages/survey/survey.pdf>.

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
/* Sans objet pour SAS */
proc freq data = donnees_sas;
  tables Sexe * CSP / missing;
  format Sexe sexef. CSP $cspf.;
  weight poids_sondage;
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(survey)
tab <- survey::svydesign(id = ~1, weights = ~poids_sondage, data = donnees_rbase)
survey::svytable(poids_sondage ~ sexef + cspf, design = tab)
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# La syntaxe avec pipe n'est pas compatible avec le package survey
library(survey)
tab <- survey::svydesign(id = ~1, weights = ~poids_sondage, data = donnees_tidyverse)
survey::svytable(poids_sondage ~ sexef + cspf, design = tab)
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(survey)
tab <- survey::svydesign(id = ~1, weights = ~poids_sondage, data = donnees_datatable)
survey::svytable(poids_sondage ~ sexef + cspf, design = tab)
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

### Package `procs`

Lien vers la documentation : <https://cran.r-project.org/web/packages/procs/vignettes/procs-freq.html>.

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
/* Sans objet pour SAS */
proc freq data = donnees_sas;
  tables Sexe * CSP / missing;
  format Sexe sexef. CSP $cspf.;
  weight poids_sondage;
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(procs)
procs::proc_freq(donnees_rbase, tables = cspf * sexef, options = v(missing))
# Ne fonctionne pas avec le poids !!!
#procs::proc_freq(donnees_rbase, tables = cspf * sexef, weight = poids_sondage, options = v(missing))
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(procs)
procs::proc_freq(donnees_tidyverse, tables = cspf * sexef, options = v(missing))
# Ne fonctionne pas avec le poids !!!
#procs::proc_freq(donnees_tidyverse, tables = cspf * sexef, weight = poids_sondage, options = v(missing))
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(procs)
# Il semble nécessaire de convertire l'objet en data.frame
procs::proc_freq(setDF(donnees_datatable), tables = cspf * sexef, options = v(missing))
# Ne fonctionne pas avec le poids !!!
#procs::proc_freq(setDF(donnees_datatable), tables = cspf * sexef, weight = poids_sondage, options = v(missing))
# On reconvertit en data.table
setDT(donnees_datatable)
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Solutions avec package `R` ne permettant apparemment pas de pondérer

Autres packages, qui semblent peu utiles, ne permettant apparemment pas de pondérer.

### Package `Janitor`

Lien vers la documentation : <https://cran.r-project.org/web/packages/janitor/vignettes/tabyls.html>.

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
/* Sans objet pour SAS */
proc freq data = donnees_sas;
  tables Sexe * CSP / missing;
  format Sexe sexef. CSP $cspf.;
  weight poids_sondage;
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(janitor)
# Attention, la fonction tabyl ne permet pas de pondérer
tab <- janitor::tabyl(donnees_rbase, cspf, sexef)
tab
janitor::adorn_totals(tab, c("row", "col"))
# Pourcentages
janitor::adorn_percentages(tab, denominator = "all", na.rm = TRUE)
# Pourcentages lignes
janitor::adorn_percentages(tab, denominator = "row", na.rm = TRUE)
# Pourcentages colonnes
janitor::adorn_percentages(tab, denominator = "col", na.rm = TRUE)
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(janitor)
# Attention, la fonction tabyl ne permet pas de pondérer
tab <- donnees_tidyverse %>% 
  janitor::tabyl(cspf, sexef) %>% 
  janitor::adorn_totals(c("row", "col"))
tab
# Pourcentages
tab %>% janitor::adorn_percentages(denominator = "all", na.rm = TRUE)
# Pourcentages lignes
tab %>% janitor::adorn_percentages(denominator = "row", na.rm = TRUE)
# Pourcentages colonnes
tab %>% janitor::adorn_percentages(denominator = "col", na.rm = TRUE)
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(janitor)
# Attention, la fonction tabyl ne permet pas de pondérer
tab <- janitor::tabyl(donnees_datatable, cspf, sexef)
tab
janitor::adorn_totals(tab, c("row", "col"))
# Pourcentages
janitor::adorn_percentages(tab, denominator = "all", na.rm = TRUE)
# Pourcentages lignes
janitor::adorn_percentages(tab, denominator = "row", na.rm = TRUE)
# Pourcentages colonnes
janitor::adorn_percentages(tab, denominator = "col", na.rm = TRUE)
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

### Package `crosstable`

Lien vers la documentation : <https://cran.r-project.org/web/packages/crosstable/crosstable.pdf>.

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
/* Sans objet pour SAS */
proc freq data = donnees_sas;
  tables Sexe * CSP / missing;
  format Sexe sexef. CSP $cspf.;
  weight poids_sondage;
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(crosstable)
crosstable::crosstable(donnees_rbase, cspf, by = sexef, showNA = "always", percent_digits = 0, percent_pattern ="{n} ({p_col}/{p_row})")
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(crosstable)
crosstable::crosstable(donnees_tidyverse, cspf, by = sexef, showNA = "always",
                       percent_digits = 0, percent_pattern ="{n} ({p_col}/{p_row})")
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(crosstable)
crosstable::crosstable(donnees_datatable, cspf, by = sexef, showNA = "always",
                       percent_digits = 0, percent_pattern ="{n} ({p_col}/{p_row})")
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

### Package `gmodels`

Lien vers la documentation : <https://cran.r-project.org/web/packages/gmodels/gmodels.pdf>.

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
/* Sans objet pour SAS */
proc freq data = donnees_sas;
  tables Sexe * CSP / missing;
  format Sexe sexef. CSP $cspf.;
  weight poids_sondage;
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(gmodels)
gmodels::CrossTable(donnees_rbase$cspf, donnees_rbase$sexef)
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(gmodels)
donnees_tidyverse %>% 
  summarise(gmodels::CrossTable(cspf, sexef))
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(gmodels)
gmodels::CrossTable(donnees_datatable$cspf, donnees_datatable$sexef)
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

### Package `gtsummary`

Lien vers la documentation : <https://cran.r-project.org/web/packages/gtsummary/gtsummary.pdf>.

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
/* Sans objet pour SAS */
proc freq data = donnees_sas;
  tables Sexe * CSP / missing;
  format Sexe sexef. CSP $cspf.;
  weight poids_sondage;
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(gtsummary)
# Pourcentages par case, colonne, ligne
gtsummary::tbl_cross(data = donnees_rbase, row = cspf, col = sexef, percent = c("cell"),   margin = c("column", "row"), missing = c("always"))
gtsummary::tbl_cross(data = donnees_rbase, row = cspf, col = sexef, percent = c("column"), margin = c("column", "row"), missing = c("always"))
gtsummary::tbl_cross(data = donnees_rbase, row = cspf, col = sexef, percent = c("row"),    margin = c("column", "row"), missing = c("always"))
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(gtsummary)
# Pourcentages par case, colonne, ligne
gtsummary::tbl_cross(data = donnees_tidyverse, row = cspf, col = sexef, percent = c("cell"),   margin = c("column", "row"), missing = c("always"))
gtsummary::tbl_cross(data = donnees_tidyverse, row = cspf, col = sexef, percent = c("column"), margin = c("column", "row"), missing = c("always"))
gtsummary::tbl_cross(data = donnees_tidyverse, row = cspf, col = sexef, percent = c("row"),    margin = c("column", "row"), missing = c("always"))
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
library(gtsummary)
# Pourcentages par case, colonne, ligne
gtsummary::tbl_cross(data = donnees_datatable, row = cspf, col = sexef, percent = c("cell"),  
                     margin = c("column", "row"), missing = c("always"))
gtsummary::tbl_cross(data = donnees_datatable, row = cspf, col = sexef, percent = c("column"),
                     margin = c("column", "row"), missing = c("always"))
gtsummary::tbl_cross(data = donnees_datatable, row = cspf, col = sexef, percent = c("row"),   
                     margin = c("column", "row"), missing = c("always"))
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::